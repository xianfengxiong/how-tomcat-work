<?xml version="1.0" ?>

<project name="jk_native2" default="main" basedir=".">

  <description>Build the native component of jk.</description>
  
  <property environment="env" />

  <property file="${user.home}/.ant.properties" />
  <property file="${user.home}/build.properties" />
  <property file="${user.home}/build.properties.${os.arch}.${os.name}" />
  <property file="../build.properties.${os.arch}.${os.name}" />
  <property file="../build.properties" />

  <property name="arch.prefix" value="" />

  <!-- ========== Local paths, overriden in build.properties ========== -->

  <property name="netscape.home" location="${iplanet.home}/plugins" />
  <property name="apache2.home" location="${env.APACHE2_HOME}" />
  <!-- That's the default RedHat package -->
  <property name="apache13.home" location="/usr" />
  
  <!-- Uncomment if you want to use APR in apache1.3 
  <property name="APACHE13_APR" value="true" />
    -->

  <property name="apache2.include" value="${apache2.home}/include" />
  <property name="apr.include" location="${apache2.include}" />
 
  <!-- ========== Build options ========== -->

  <property name="so.debug" value="true" />
  <property name="so.optimize" value="false" />
  <property name="so.profile" value="false" />

  <!-- ========== local properties ========== -->
 
  <!-- Base dir for jk sources -->
  <property name="jk.src" location=".." />
  <property name="jk.build" location="../build" />

  <property name="native.dir" location="${jk.src}/native2" />

  <property name="build.dir" location="${jk.build}/jk2" />
  <property name="cpptask.jar" location="${jk.src}/../lib/cpptasks.jar" />

  <path id="jkant" >
    <pathelement location="${jk.build}/lib/jkant.jar"/>
    <pathelement location="${cpptask.jar}"/>
  </path>

  <!-- ==================== Targets ==================== -->

  <target name="main" depends="init,apache20,apache13,jni,iis,aolserver">
  </target>

  <target name="all" depends="jkant,main">
  </target>

  <target name="init.taskdef" >
    <taskdef resource="META-INF/ant.tasks" 
	     classpathref="jkant" />

  </target>

  <target name="guess.os" >
    <echo message="build.properties ${os.arch}.${os.name}" />
    <!-- What OS ( it'll determine the includes ) -->
    <condition property="linux">
       <equals arg1="${os.name}" arg2="Linux"/>
    </condition>
    <condition property="solaris">
       <equals arg1="${os.name}" arg2="SunOS"/>
    </condition>
    <condition property="win32">
      <os family="windows"/>
    </condition>
    <condition property="hpux">
      <equals arg1="${os.name}" arg2="HP-UX"/>
    </condition>
    <!-- I believe they are using cross-compilation, so checking the os.name
         doesn't help. We'll check if the NDK is installed instead -->
    <condition property="netware">
      <available file="novellndk.home" />
    </condition>
    <echo message="Linux:${linux} Win32:${win32} Netware:${netware} Solaris:${solaris} HPUX:${hpux}" />
  </target>


  <target name="guess.server" >
    <!-- What servers do we have ? -->
    <available property="apache2.detect" 
               file="${apache2.home}" />
    <condition property="apache13.detect" >
       <or>
        <available file="${apache13.home}/bin/htpasswd" />
        <available file="${apache13.home}/bin/htpasswd.exe" />
       </or>
    </condition>
    <available property="iis.detect" 
               file="${mssdk.home}" />
    <available property="iplanet.detect" 
               file="${iplanet.home}" />
    <available property="aolserver.detect" 
               file="${aolserver.home}" />
    <condition property="build.jni" >
       <or>
        <isset property="iis.detect"  />
        <isset property="apache2.detect"  />
       </or>
    </condition>
    <echo message="Apache2 ${apache2.home} ${apache2.detect}" />
    <echo message="Apache13 ${apache13.home} ${apache13.detect}" />
    <echo message="IIS ${iis.home} ${iis.detect}" />
    <echo message="Iplanet ${iplanet.home} ${iplanet.detect}" />
    <echo message="AOLserver ${aolserver.home} ${aolserver.detect}" />
    <echo message="JNI ${build.jni}" />
    <echo message="" />
  </target>

  <!-- Platform-specific intialization -->
  <target name="init.os" depends="init.win32,init.netware" />

  <target name="init.win32.properties" if="win32" >
    <!-- Override it in build.properties if using windows and a 
    different location. I think that's the defaul location for msdev -->
    <property name="mssdk.home" 
              location="c:/Program Files/Microsoft Visual Studio/VC98"/>

    <property name="build.compiler.base" location="${mssdk.home}" />
    <property name="build.compiler.cc" location="${mssdk.home}/bin/cl" />
    <property name="build.compiler.ld" location="${mssdk.home}/bin/link" />
    <echo message="MSDEV compiler: ${mssdk.home}" />
    <uptodate property="mc.uptodate"  
              targetfile="${build.dir}/jk_logger_win32_message.res">
      <srcfiles dir="common" includes="*.mc"/>
    </uptodate>
  </target>

  <target name="init.win32.mc" unless="mc.uptodate" if="win32">
    <exec executable="${mssdk.home}/bin/mc" dir="common" >
      <arg value="jk_logger_win32_message.mc" />
    </exec>
    <exec executable="${mssdk.home}/bin/rc" dir="common" >
      <arg value="-r" />
      <arg value="-fo"/>
      <arg value="${build.dir}/jk_logger_win32_message.res"/>
      <arg value="jk_logger_win32_message.rc" />
    </exec>
  </target>

  <target name="init.win32" depends="init.win32.properties,init.win32.mc" if="win32" />

  <target name="init.netware" if="netware" >
    <property name="mw.home" location="d:/tools/mw/6.0" />
    <property name="novellndk.home" location="d:/tools/novell/ndk/nwsdk" />

    <property name="build.compiler.base" location="${mw.home}" />
    <property name="build.compiler.cc" location="${build.compiler.base}/bin/mwccnlm" />
    <property name="build.compiler.ld" location="${build.compiler.base}/bin/mwldnlm" />
    <property name="novelllibc.dir" location="${novellndk.home}/libc" />
    <echo message="MWCC compiler: ${mw.home}" />
    <echo message="NDK: ${novellndk.home}" />
  </target>


  <target name="init" depends="init.taskdef,guess.os,init.os,guess.server" >
    <mkdir dir="${build.dir}" />
    <!-- set this to "" if you don't want the prefix. This will use the 
          prefix in the target name, to allow multiple platforms to build in 
          the same tree -->
  </target>

  <target name="jkant" >
    <ant dir="${jk.src}" target="jkant"/>
  </target>

  <target name="apache20-cpptask" depends="init" if="apache2.detect">
    <property name="ant.reuse.loader"  value="true" />

    <taskdef resource="cpptasks.tasks" classpathref="jkant" />
    <typedef resource="cpptasks.types" classpathref="jkant" />
      
    <property name="apr.include" location="${apache2.home}/include" />
    <mkdir dir="${build.dir}/apache2${arch.prefix}" />
    
    <defineset id="jk2-defs">
           <define name="_REENTRANT" />
           <define name="CHUNK_SIZE" value="4096" />
           <define name="USE_APACHE_MD5" />
           <define name="HAS_APR" />
           <define name="HAVE_JNI" />

           <define name="HPUX11" if="hpux" />
           <define name="WIN32" if="win32" />
           <define name="_WINDOWS" if="win32" />
           <define name="_MBCS" if="win32" />
           <define name="_USRDLL" if="win32" />
           <define name="MOD_JK2_EXPORTS" if="win32" />
    </defineset>

    <cc outtype="shared"
        subsystem="console"
        runtime="dynamic"
        objdir="${build.dir}/apache2${arch.prefix}" 
        outfile="${build.dir}/apache2${arch.prefix}/mod_jk2.so" >

        <compiler name="msvc" if="use.msvc" >
        </compiler>

        <compiler name="gcc"  
                  warnings="diagnostic" 
                  debug="true" />
        
        <!-- Do we need this ? 
        <linker name="gcc"  
                debug="true">
        </linker>
        -->
        
        <fileset dir="." >
          <include name="server/apache2/*.c" />
	  <include name="common/*.c" />
	  <include name="jni/*.c" />
        </fileset>
        
        <includepath location="${native.dir}/common" />
        <includepath location="${native.dir}/include" />

        <sysincludepath location="${apache2.home}/include" />
        <sysincludepath location="${apache2.home}/include/httpd" />
	<sysincludepath location="${apr.include}" />
	<sysincludepath location="${apr-util.include}" />

	<sysincludepath location="${java.home}/../include" />
        <sysincludepath location="${java.home}/../include/linux" if="linux" />
        <sysincludepath location="${java.home}/../include/hp-ux" if="hpux" />        
        <sysincludepath location="${java.home}/../include/win32" if="win32" />        
        <sysincludepath location="${java.home}/../include/solaris" if="solaris" />        
        <sysincludepath location="&quot;${mssdk.home}/include&quot;" if="win32"/>
        
        <defineset refid="jk2-defs"/>

        <syslibset libs="libhttpd" if="win32" />
        <syslibset libs="libapr" if="win32" />
        <syslibset libs="libaprutil" if="win32" />
        <!--
        <libset libs="libhttpd.lib" if="win32" />
        <libset libs="libapr.lib" if="win32" />
        <libset libs="libaprutil.lib" if="win32" />
         -->
        <libset libs="advapi32.lib" if="win32" />
        <libset libs="wsock32.lib" if="win32" />

        <linkerArg value="/libpath:&quot;${apr.lib}&quot;" if="win32" />
        <linkerArg value="/libpath:&quot;${apr-util.lib}&quot;" if="win32" />
        <linkerArg value="/libpath:&quot;${apache2.home}/lib&quot;" if="win32" />
        <linkerArg value="/libpath:&quot;${mssdk.home}/lib&quot;" if="win32" />
        <linkerArg value="/libpath:&quot;${mssdk.home}/../Common/MSDev98/bin&quot;" if="win32" />
    </cc>
    
    <!-- Missing in cc:
          - profile: can be implemented with flags
          - depends: can be implemented using ant built-ins
          - Netware/MWCC: probably easy to port.
         Bugs: 
          - libtool doesn't seem to work with multiple files ( easy )
          - can't specify mod_jk.so as name ( will generate libmod_jk.so )
          - Classpath problems - can't use types if the jar is not in the CP. Workaround with
            a special <cc-init> task.
          - 'history.xml' seems to create major problems ( compile-related ? )
     -->
  </target>
  
  <target name="apache20" depends="init" if="apache2.detect">
    <mkdir dir="${build.dir}/apache2${arch.prefix}" />
    <so sofile="mod_jk2" 
	buildDir="${build.dir}/apache2${arch.prefix}"
	optimize="${so.optimize}"
	debug="${so.debug}"
	taskDebug="0"
	profile="${so.profile}"	>
      <def name="_REENTRANT" />
      <def name="CHUNK_SIZE" value="4096" 
	   info="Read/Write buffer size" />
      <def name="USE_APACHE_MD5" 
	   info="Use the MD5 implementation that is part of apache2" />
      <def name="HAS_APR"
	   info="Allow APR specific extensions" />
      <def name="HAVE_JNI" 
	   info="Jni worker" />
      <def name="HPUX11" if="hpux" />
      <def name="WIN32" if="win32" />
      <def name="_WINDOWS" if="win32" />
      <def name="_MBCS" if="win32" />
      <def name="_USRDLL" if="win32" />
      <def name="MOD_JK2_EXPORTS" if="win32" />
      <src dir=".">
	<include name="server/apache2/*.c" />
	<include name="common/*.c" />
	<include name="jni/*.c" />
      </src>
      <includes>
	<include name="${native.dir}/common" />
	<include name="${apache2.include}" />
	<include name="${apr.include}" />
	<include name="${apr-util.include}" />
	<include name="${native.dir}/include" />
	<include name="${java.home}/../include" />
        <include name="${java.home}/../include/linux" if="linux" />
        <include name="${java.home}/../include/hp-ux" if="hpux" />        
        <include name="${java.home}/../include/win32" if="win32" />        
        <include name="${java.home}/../include/solaris" if="solaris" />        
        <include name="&quot;${mssdk.home}/include&quot;" if="win32"/>
      </includes>
      <depends>
	<fileset dir="${native.dir}/common" includes="*.h" />
	<fileset dir="${native.dir}/include" includes="*.h" />
      </depends>
      <resource fileName="../jk_logger_win32_message.res" if="win32" />
      <import fileName="libhttpd.lib" if="win32" />
      <import fileName="libapr.lib" if="win32" />
      <import fileName="libaprutil.lib" if="win32" />
      <import fileName="advapi32.lib" if="win32" />
      <import fileName="wsock32.lib" if="win32" />
      <import fileName="shell32.lib" if="win32" />
      <import fileName="kernel32.lib" if="win32" />

      <linkOpt value="/libpath:&quot;${apr.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apr-util.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apache2.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/../Common/MSDev98/bin&quot;" if="win32" />
    </so>
  </target>
  
  <target name="aolserver" description="Build nsjk2 module for AOLserver" depends="init" if="aolserver.detect">
    <property name="apr.include" location="${apache2.home}/include" />
    <mkdir dir="${build.dir}/aolserver${arch.prefix}" />

    <so sofile="nsjk2"
	buildDir="${build.dir}/aolserver${arch.prefix}"
	optimize="${so.optimize}"
	debug="${so.debug}"
	taskDebug="0"
	profile="${so.profile}"	>
      <def name="_REENTRANT" />
      <def name="CHUNK_SIZE" value="4096" 
	   info="Read/Write buffer size" />

	<!-- Use MD5 from APU
      <def name="USE_APACHE_MD5" 
	   info="Use the MD5 implementation that is part of apache2" />
	-->

      <def name="HAS_APR"
	   info="Allow APR specific extensions" />
      <def name="HAVE_JNI" 
	   info="Jni worker" />
      <def name="HPUX11" if="hpux" />
      <def name="WIN32" if="win32" />
      <def name="_WINDOWS" if="win32" />
      <def name="_MBCS" if="win32" />
      <def name="_USRDLL" if="win32" />
      <def name="MOD_JK2_EXPORTS" if="win32" />
      <src dir=".">
	<include name="server/aolserver/*.c" />
	<include name="common/*.c" />
	<include name="jni/*.c" />
      </src>
      <includes>
	<include name="${native.dir}/common" />
	<include name="${aolserver.home}/include" />
	<include name="${aolserver.home}" />
	<include name="${apr.include}" />
	<include name="${apr-util.include}" />
	<include name="${native.dir}/include" />
	<include name="${java.home}/../include" />
        <include name="${java.home}/../include/linux" if="linux" />
        <include name="${java.home}/../include/hp-ux" if="hpux" />        
        <include name="${java.home}/../include/win32" if="win32" />        
        <include name="${java.home}/../include/solaris" if="solaris" />        
        <include name="&quot;${mssdk.home}/include&quot;" if="win32"/>
      </includes>
      <depends>
	<fileset dir="${native.dir}/common" includes="*.h" />
	<fileset dir="${native.dir}/include" includes="*.h" />
      </depends>
      <resource fileName="../jk_logger_win32_message.res" if="win32" />
      <import fileName="libhttpd.lib" if="win32" />
      <import fileName="libapr.lib" if="win32" />
      <import fileName="libaprutil.lib" if="win32" />
      <import fileName="advapi32.lib" if="win32" />
      <import fileName="wsock32.lib" if="win32" />
      <import fileName="shell32.lib" if="win32" />
      <import fileName="kernel32.lib" if="win32" />

      <linkOpt value="/libpath:&quot;${apr.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apr-util.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apache2.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/../Common/MSDev98/bin&quot;" if="win32" />
      <linkOpt value="-L${apr.lib}" />
      <linkOpt value="-lapr-0" />
      <linkOpt value="-laprutil-0" />
      <linkOpt value="-lexpat" />
    </so>
  </target>
  
  <target name="jni" depends="init" if="build.jni">
    <mkdir dir="${build.dir}/jni${arch.prefix}" />
    <!-- can be overriden -->
    <property name="apr.home" location="${apache2.home}" />
    <property name="apr.include" location="${apr.home}/include" />
    <property name="apr.lib" location="${apr.home}/lib" />

    <so sofile="libjkjni" 
	buildDir="${build.dir}/jni${arch.prefix}" 
	optimize="${so.optimize}"
	debug="${so.debug}"
	profile="${so.profile}" >
      <src dir="${native.dir}">
	<include name="jni/*.c" />
	<include name="common/*.c" />
        <exclude name="common/jk_nwmain.c" unless="netware" />
      </src>
      <includes>
	<include name="${native.dir}/common" />
	<include name="${native.dir}/jni" />
	<include name="${native.dir}/include" />
	<include name="${java.home}/../include" />
	<include name="${build.compiler.base}/include" />
	<include name="${apr.include}" />
	<include name="${apr.include}/httpd" />
        
        <!-- Platform specific includes -->
	<include name="${novellndk.home}/include/nlm" if="netware" />
	<include name="${novellndk.home}/include" if="netware" />
        <include name="${java.home}/../include/netware" if="netware" />
        
        <include name="${java.home}/../include/win32" if="win32" />
        <include name="${java.home}/../include/solaris" if="solaris" />        
        <include name="${java.home}/../include/linux" if="linux" />
        <include name="${java.home}/../include/hp-ux" if="hpux" />        
      </includes>
      <depends>
	<fileset dir="${native.dir}/common" includes="*.h" />
	<fileset dir="${native.dir}/include" includes="*.h" />
      </depends>
      <resource fileName="../jk_logger_win32_message.res" if="win32"/>

      <!-- Platform-specific tags. We should have a "readhat" test too -->
      <linkOpt value="-lcrypt" if="linux" />
      <linkOpt value="-L${apr.lib}" if="linux" />
      <linkOpt value="-lapr-0" if="linux" />

      <linkOpt value="-L${apr.lib}" if="solaris" />
      <linkOpt value="-lapr-0" if="solaris" />

      <linkOpt value="-L${apr.lib}" if="hpux" />
      <linkOpt value="-lapr-0" if="hpux" />

      <altSoFile value="jni_conn" if="netware" />
      
      <def name="N_PLAT_NLM" if="netware"
	   info="Building for NetWare platform" />
      <def name="NETWARE" if="netware"
	   info="Building for NetWare platform" />
      <def name="XP_NETWARE" if="netware"
	   info="Building for NetWare platform" />
      <def name="HAS_APR" info="JNI is now based on APR" />
      <def name="_REENTRANT" />
      <def name="HAVE_JNI" />
           
      <import fileName="${novellndk.home}/imports/clib.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/lib0.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/nlmlib.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/threads.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/socklib.imp" if="netware" />
      <export fileName="${native.dir}/jni/jk_jnicb.exp" if="netware" />
      <linkOpt value="-desc &quot;JNI Natives for Tomcat&quot;" if="netware" />
      <linkOpt value="-screenname &quot;System Console&quot;" if="netware" />
      <linkOpt value="-nlmversion 1,20,2" if="netware" />
      <linkOpt value="-threadname &quot;JK_JNI Thread&quot;" if="netware" />
      <linkOpt value="-stacksize 64000" if="netware" />
      
      <def name="HPUX11" if="hpux" />
      <def name="WIN32" if="win32" />
      <def name="NDEBUG" if="win32.release" />
      <def name="_DEBUG" if="win32.debug" />
      <def name="_WINDOWS" if="win32" />
      <def name="_MBCS" if="win32" />
      <def name="_USRDLL" if="win32" />
      <def name="JNI_CONNECT_EXPORTS" if="win32" />
      <def name="HAVE_SIGNAL" unless="win32" />

      <import fileName="libhttpd.lib" if="win32" />
      <import fileName="libapr.lib" if="win32" />
      <import fileName="libaprutil.lib" if="win32" />
      <import fileName="advapi32.lib" if="win32" />
      <import fileName="wsock32.lib" if="win32" />

      <linkOpt value="/libpath:&quot;${apr.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apr-util.lib}&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apache2.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/../Common/MSDev98/bin&quot;" if="win32" />
    </so>
  </target>


  <target name="apache13" depends="init" if="apache13.detect">
    <mkdir dir="${jk.build}/jk2/apache13${arch.prefix}" />
    <so sofile="mod_jk2" 
	buildDir="${jk.build}/jk2/apache13${arch.prefix}"
	optimize="${so.optimize}"
	debug="${so.debug}"
	profile="${so.profile}">

      <src dir=".">
	<include name="server/apache13/*.c" />
	<include name="common/*.c" />
        <exclude name="jk_nwmain.c" unless="netware" />
      </src>
      <includes>
	<include name="${native.dir}/include" />
	<include name="${native.dir}/common" />
	<include name="${build.compiler.base}/include" />
	<include name="${apache13.home}/include" />
        <!-- Redhat package -->
	<include name="${apache13.home}/include/apache" />
	<include name="${native.dir}/include" />
	<include name="${java.home}/../include" />

        <!-- Platform specific includes -->
	<include name="${apache13.home}/os/netware" if="netware" />
	<include name="${novellndk.home}/include/nlm" if="netware" />
	<include name="${novellndk.home}/include" if="netware" />
	<include name="${novellndk.home}/include/winsock" if="netware" />
        <include name="${java.home}/../include/netware" if="netware" />
                 
	<include name="${apache13.home}/os/win32" if="win32" />
        <include name="${java.home}/../include/win32" if="win32" />
        <include name="${native.dir}/common" if="win32" />
        <include name="${java.home}/../include/solaris" if="solaris" />        
        <include name="${java.home}/../include/hp-ux" if="hpux" />        
        <include name="${java.home}/../include/linux" if="linux" />
      </includes>
      <depends>
	<fileset dir="${native.dir}/common" includes="*.h" />
      </depends>

      <resource fileName="../jk_logger_win32_message.res" if="win32"/>

      <def name="EAPI" info="Building with EAPI support " />
      <def name="_REENTRANT" />
      <def name="CHUNK_SIZE" value="4096" />

      <!-- Platform-specific tags -->
      <def name="N_PLAT_NLM" if="netware"
	   info="Building for NetWare platform" />
      <def name="NETWARE" if="netware"
	   info="Building for NetWare platform" />
      <def name="XP_NETWARE" if="netware"
	   info="Building for NetWare platform" />
      <def name="USE_SPRINTF" if="netware"
	   info="Use the sprintf function to build strings" />
           
      <def name="HAVE_MMAP" unless="win32" />
      <def name="WIN32" if="win32" />
      <def name="_WINDOWS" if="win32" />
      <def name="_MBCS" if="win32" />
      <def name="_USRDLL" if="win32" />
      <def name="MOD_JK_EXPORTS" if="win32" />
      <def name="HPUX11" if="hpux" />

      
      <nlmmodule value="apache" if="netware" />
      <import fileName="${novellndk.home}/imports/clib.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/lib0.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/nlmlib.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/threads.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/socklib.imp" if="netware" />
      <import fileName="${novellndk.home}/imports/ws2nlm.imp" if="netware" />
      <import fileName="${apache13.home}/os/netware/ApacheCore.imp" if="netware" />
      <export symbol="jk2_module" if="netware" />
      <linkOpt value="-desc &quot;Apache 1.3 plugin for Tomcat&quot;" if="netware" />
      <linkOpt value="-screenname &quot;System Console&quot;" if="netware" />
      <linkOpt value="-nlmversion 1,20,2" if="netware" />
      <linkOpt value="-threadname &quot;mod_jk Thread&quot;" if="netware" />
      <linkOpt value="-stacksize 64000" if="netware" />
      
      <export symbol="jk2_module" if="win32" />
      <import fileName="ApacheCore.lib" if="win32" />
      <import fileName="wsock32.lib" if="win32" />
      <import fileName="advapi32.lib" if="win32" />
      <linkOpt value="/libpath:&quot;${build.compiler.base}/lib&quot;" 
	       if="win32" />
      <linkOpt value="/libpath:&quot;${apache13.home}/libexec&quot;" 
	        if="win32" />
    </so>
  </target>

  <target name="iis" depends="init" if="iis.detect">
    <mkdir dir="${build.dir}/isapi" />
    <so sofile="isapi_redirector2" 
        buildDir="${build.dir}/isapi"
        optimize="${so.optimize}"
        debug="${so.debug}"
        profile="${so.profile}">
        
      <src dir=".">
        <include name="server/isapi/*.c" />
        <include name="common/*.c" />
        <exclude name="jk_nwmain.c" unless="netware" />
	<include name="jni/*.c" />
        <exclude name="jk_apr.c" unless="netware" />
      </src>
      <includes>
        <include name="${java.home}/../include" />
        <include name="${apr.include}/../include" />
	<include name="${native.dir}/include" />
        <include name="${java.home}/../include/win32" />
        <include name="${native.dir}/common" />
        <include name="${native.dir}/server/isapi" />
        <include name="${build.compiler.base}/include" />
        <!--include name="&quot;${build.compiler.base}/include&quot;" /-->
        <include name="&quot;${mssdk.home}/include&quot;"/>
      </includes>
      <depends>
        <fileset dir="${native.dir}/common" includes="*.h" />
      </depends>
      <resource fileName="../jk_logger_win32_message.res"/>

      <!-- Platform-specific tags -->
      <def name="WIN32" />
      <def name="_WINDOWS"  />
      <def name="NDEBUG" if="win32.release" />
      <def name="_DEBUG" if="win32.debug" />
      <def name="_MBCS" />
      <def name="_USRDLL" />
      <def name="ISAPI_EXPORTS" />
      <def name="HAS_APR" />
      <def name="HAVE_JNI" 
	   info="Jni worker" />

      <import fileName="advapi32.lib" />
      <import fileName="wsock32.lib" />
      <import fileName="libapr.lib" if="win32" />
      <import fileName="libaprutil.lib" if="win32" />
      <export symbol="HttpFilterProc"/>
      <export symbol="GetFilterVersion"/>
      <export symbol="GetExtensionVersion"/>
      <export symbol="HttpExtensionProc"/>
      <export symbol="TerminateFilter"/>
      <export symbol="TerminateExtension"/>
      <linkOpt value="/libpath:&quot;${mssdk.home}/lib&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${mssdk.home}/../Common/MSDev98/bin&quot;" if="win32" />
      <linkOpt value="/libpath:&quot;${apr.lib}&quot;" if="win32" />
    </so>
  </target>

  <target name="clean" >
    <delete >
      <fileset dir="${build.dir}">
	<include name="**/*.o"/>
	<include name="**/*.so"/>
	<include name="**/*.lo"/>
	<include name="**/*.la"/>
	<include name="**/*.a"/>
	<include name="**/.libs"/>
	<include name="**/*.lib"/>
	<include name="**/*.nlm"/>
	<include name="**/*.map"/>
	<include name="**/*.sym"/>
	<include name="**/*.NCV"/>
	<include name="**/*.exp"/>
	<include name="**/*.pdb"/>
	<include name="**/*.opt"/>
	<include name="**/*.def"/>
	<include name="**/*.obj"/>
	<include name="**/*.dll"/>
	<include name="**/*.res"/>
      </fileset>
    </delete>
  </target>

</project>
